"""
Django settings for stock_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # 개발 환경에서는 True로 설정

ALLOWED_HOSTS = ['localhost', '127.0.0.1']  # 개발 환경에서 허용할 호스트


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'channels',
    'stocks',
    'financials',
    'analysis',
    'sentiment',
    'authentication',  # 인증 앱 추가
    'portfolios',  # 포트폴리오 앱 추가
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'stock_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'stock_backend.wsgi.application'

# WebSocket 설정
ASGI_APPLICATION = 'stock_backend.asgi.application'

# 개발 환경에서 In-Memory 채널 레이어 사용 (Redis 없이 테스트)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# Channels Layer 설정 (Redis 백엔드) - Redis가 설치된 환경에서 사용
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#             "capacity": 1500,  # 채널당 최대 메시지 수
#             "expiry": 60,      # 메시지 만료 시간 (초)
#         },
#     },
# }

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Cache configuration
# https://docs.djangoproject.com/en/5.2/topics/cache/
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'kospi-cache',
        'TIMEOUT': 300,  # 5분 기본 캐시 시간
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    },
    'stock_data': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'stock-data-cache',
        'TIMEOUT': 60,  # 1분 캐시 (주가 데이터용)
        'OPTIONS': {
            'MAX_ENTRIES': 500,
        }
    },
    'market_data': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'market-data-cache',
        'TIMEOUT': 30,  # 30초 캐시 (시장 지수용)
        'OPTIONS': {
            'MAX_ENTRIES': 100,
        }
    }
}

# Cache key prefixes
CACHE_KEY_PREFIX = 'kospi_'
STOCK_CACHE_TIMEOUT = 60  # 1분
MARKET_CACHE_TIMEOUT = 30  # 30초
ANALYSIS_CACHE_TIMEOUT = 300  # 5분

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.getenv('STATIC_ROOT', '/app/staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'stocks.consumers': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'kis_api.mock_websocket_client': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
}

# CSRF 설정
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# ===== KIS API 설정 =====
# 한국투자증권 API 설정
KIS_USE_MOCK = os.getenv('KIS_USE_MOCK', 'False').lower() == 'true'  # 기본값: 실제 API 모드
KIS_IS_PAPER_TRADING = os.getenv('KIS_IS_PAPER_TRADING', 'True').lower() == 'true'  # 모의투자/실계좌

# API 키 설정 (환경변수에서 가져오기)
KIS_APP_KEY = os.getenv('KIS_APP_KEY')
KIS_APP_SECRET = os.getenv('KIS_APP_SECRET')

# API URL 설정
if KIS_IS_PAPER_TRADING:
    KIS_BASE_URL = os.getenv('KIS_BASE_URL', 'https://openapivts.koreainvestment.com:29443')  # 모의투자용
    KIS_WEBSOCKET_URL = os.getenv('KIS_WEBSOCKET_URL', 'ws://ops.koreainvestment.com:31000')  # 모의투자용
else:
    KIS_BASE_URL = os.getenv('KIS_BASE_URL', 'https://openapi.koreainvestment.com:9443')   # 실계좌용
    KIS_WEBSOCKET_URL = os.getenv('KIS_WEBSOCKET_URL', 'ws://ops.koreainvestment.com:21000')  # 실계좌용

# WebSocket 연결 설정
KIS_WEBSOCKET_TIMEOUT = int(os.getenv('KIS_WEBSOCKET_TIMEOUT', '30'))
KIS_RECONNECT_ATTEMPTS = int(os.getenv('KIS_RECONNECT_ATTEMPTS', '3'))
KIS_PING_INTERVAL = int(os.getenv('KIS_PING_INTERVAL', '30'))

# 디버깅용 로그
import logging
logger = logging.getLogger(__name__)

logger.info("🔧 KIS API 설정 로드 완료:")
logger.info(f"   - USE_MOCK: {KIS_USE_MOCK}")
logger.info(f"   - IS_PAPER_TRADING: {KIS_IS_PAPER_TRADING}")
logger.info(f"   - BASE_URL: {KIS_BASE_URL}")
logger.info(f"   - APP_KEY: {'설정됨' if KIS_APP_KEY else '없음'}")
logger.info(f"   - APP_SECRET: {'설정됨' if KIS_APP_SECRET else '없음'}")

# Mock 모드 안내
if KIS_USE_MOCK:
    logger.info("🎭 Mock 모드 활성화 - 가상 데이터 제공")
else:
    if not KIS_APP_KEY or not KIS_APP_SECRET:
        logger.warning("⚠️ KIS API 키가 설정되지 않았습니다!")
        logger.warning("환경변수 KIS_APP_KEY와 KIS_APP_SECRET를 설정하거나 Mock 모드를 사용하세요.")
        logger.warning("Mock 모드 사용: export KIS_USE_MOCK=true")
    else:
        logger.info("🚀 실제 KIS API 모드 활성화")
